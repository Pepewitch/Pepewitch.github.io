{"version":3,"file":"static/webpack/static/development/pages/index.js.1b37e7aa5da700f0c5a6.hot-update.js","sources":["webpack:///./components/ResponsiveStackGrid.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from \"react\";\nimport sizeMe from \"react-sizeme\";\nimport StackGrid, { transitions } from \"react-stack-grid\";\n\nconst { fadeUp, fadeDown } = transitions;\n\nconst useStackGrid = () => {\n  const stackGridRef = useRef(null);\n  const onSizeChange = useCallback(\n    () => stackGridRef && stackGridRef.current.updateLayout(),\n    [stackGridRef]\n  );\n  useEffect(() => {\n    const updateView = () => {\n      requestAnimationFrame(() => {\n        // Fix stack grid resize bug by adding some delay before updateView again\n        setTimeout(() => {\n          onSizeChange();\n        }, 20);\n      });\n    };\n    window.addEventListener(\"resize\", updateView);\n    return () => window.removeEventListener(\"resize\", updateView);\n  }, []);\n  return { stackGridRef, onSizeChange };\n};\n\nconst useIntervalAppear = (items, interval) => {\n  const [appearedItems, setAppearedItems] = useState([]);\n  useEffect(() => {\n    if (interval) {\n      const showShowcases = async () => {\n        const appeared = [];\n        for (const item of items) {\n          appeared.push(item);\n          setAppearedItems([...appeared]);\n          await new Promise(res => setTimeout(() => res(), interval));\n        }\n      };\n      showShowcases();\n    } else {\n      setAppearedItems(items);\n    }\n  }, [items]);\n  return appearedItems;\n};\n\nexport const ResponsiveStackGrid = sizeMe()(\n  ({ size, children, items, interval, ...props }: any) => {\n    const { width } = size;\n    const columnWidth = useMemo(() => {\n      if (width < 500) return \"100%\";\n      else if (width < 768) return \"50%\";\n      else return 320;\n    }, [width]);\n    const { stackGridRef, onSizeChange } = useStackGrid();\n    const appearedItems = useIntervalAppear(items, interval);\n    return (\n      <div style={{ padding: \"0 16px\" }}>\n        <StackGrid\n          gridRef={grid => (stackGridRef.current = grid)}\n          columnWidth={columnWidth}\n          gutterWidth={24}\n          gutterHeight={24}\n          appear={fadeUp.appear}\n          appeared={fadeUp.appeared}\n          enter={fadeUp.enter}\n          entered={fadeUp.entered}\n          leaved={fadeDown.leaved}\n          monitorImagesLoaded\n          {...props}\n        >\n          {children(onSizeChange, appearedItems)}\n        </StackGrid>\n      </div>\n    );\n  }\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAGA;AACA;AAPA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;;;;A","sourceRoot":""}